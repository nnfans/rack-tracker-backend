components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, admin]
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        name: fake name
        role: user

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Project:
      type: object
      properties:
        name:
          type: string
        photoUrl:
          type: string
        location:
          type: string
        budget:
          type: number
        value:
          type: number
        profit:
          type: number
        state:
          type: string
          enum:
            - OPEN
            - PROGRESS
            - PENDING
            - DROP
            - CLOSE
        description:
          type: string
        startDate:
          type: string
          format: date
        targetDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date

    Expense:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        project:
          type: '#/components/schemas/Project'
        photoUrl:
          type: number
        revisions:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
              photoUrl:
                type: number
              description:
                type: string
              price:
                type: number
              qty:
                type: number
              expenseDate:
                type: string
                format: date
              createdAt:
                type: string
                format: date
        description:
          type: string
        price:
          type: number
        qty:
          type: number
        expenseDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  parameters:
    ProjectId:
      in: path
      name: projectId
      required: true
      schema:
        type: number
      description: Project id

    expenseId:
      in: path
      name: expenseId
      required: true
      schema:
        type: string
      description: Expense id

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Bad Request

    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden

    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
